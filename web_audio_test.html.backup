<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoev4 音频桥接测试</title>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Microsoft YaHei', Arial, sans-serif;
            margin: 0;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }

        .status-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .status-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border-left: 4px solid #007bff;
        }

        .status-title {
            font-weight: bold;
            margin-bottom: 10px;
            color: #007bff;
        }

        .status-value {
            font-size: 18px;
            font-weight: bold;
        }

        .status-success {
            color: #28a745;
        }

        .status-error {
            color: #dc3545;
        }

        .status-warning {
            color: #ffc107;
        }

        .controls {
            text-align: center;
            margin: 30px 0;
        }

        .voice-btn {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: none;
            font-size: 50px;
            cursor: pointer;
            margin: 20px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .voice-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .voice-btn.recording {
            background: linear-gradient(45deg, #f44336, #d32f2f);
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .log-area {
            background: #1a1a1a;
            color: #00ff00;
            border-radius: 10px;
            padding: 20px;
            height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            margin-top: 20px;
        }

        .log-entry {
            margin: 2px 0;
            padding: 2px 0;
        }

        .log-success {
            color: #00ff00;
        }

        .log-error {
            color: #ff4444;
        }

        .log-warning {
            color: #ffaa00;
        }

        .log-info {
            color: #44ccff;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .stat-item {
            background: #e9ecef;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 20px;
            font-weight: bold;
            color: #007bff;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🎤 Zoev4 音频桥接测试</h1>

        <div class="status-grid">
            <div class="status-card">
                <div class="status-title">桥接连接状态</div>
                <div class="status-value" id="bridge-status">连接中...</div>
            </div>
            <div class="status-card">
                <div class="status-title">Zoev3系统状态</div>
                <div class="status-value" id="zoev3-status">检测中...</div>
            </div>
            <div class="status-card">
                <div class="status-title">录音会话状态</div>
                <div class="status-value" id="recording-status">待机</div>
            </div>
            <div class="status-card">
                <div class="status-title">音频处理统计</div>
                <div class="status-value" id="audio-stats">0 包</div>
            </div>
        </div>

        <div class="controls">
            <button id="voice-btn" class="voice-btn">🎤</button>
            <br>
            <small>点击开始录音，再次点击停止录音</small>
        </div>

        <div class="stats">
            <div class="stat-item">
                <div class="stat-label">OPUS包数</div>
                <div class="stat-value" id="opus-count">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">注入成功</div>
                <div class="stat-value" id="injection-count">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">录音时长</div>
                <div class="stat-value" id="recording-duration">0s</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">连接时长</div>
                <div class="stat-value" id="connection-time">0s</div>
            </div>
        </div>

        <div class="log-area" id="log-area">
            <div class="log-entry log-info">[启动] 正在初始化音频桥接测试...</div>
        </div>
    </div>

    <script>
        class AudioBridgeTest {
            constructor() {
                this.websocket = null;
                this.recording = false;
                this.audioContext = null;
                this.mediaStream = null;
                this.processor = null;
                this.startTime = Date.now();
                this.recordingStartTime = 0;
                this.opusCount = 0;
                this.injectionCount = 0;

                this.init();
            }

            async init() {
                this.log('🚀 初始化音频桥接测试', 'info');
                this.bindEvents();
                this.connectWebSocket();
                this.updateConnectionTime();
            }

            bindEvents() {
                const voiceBtn = document.getElementById('voice-btn');
                voiceBtn.addEventListener('click', () => {
                    if (this.recording) {
                        this.stopRecording();
                    } else {
                        this.startRecording();
                    }
                });
            }

            connectWebSocket() {
                try {
                    this.log('🌉 连接音频桥接服务...', 'info');
                    this.websocket = new WebSocket('ws://localhost:8004/ws/audio');

                    this.websocket.onopen = () => {
                        this.log('✅ 音频桥接连接成功', 'success');
                        this.updateStatus('bridge-status', '已连接', 'success');
                    };

                    this.websocket.onmessage = (event) => {
                        try {
                            const message = JSON.parse(event.data);
                            this.handleMessage(message);
                        } catch (e) {
                            this.log(`📥 收到原始消息: ${event.data}`, 'info');
                        }
                    };

                    this.websocket.onclose = () => {
                        this.log('🔌 音频桥接连接断开', 'warning');
                        this.updateStatus('bridge-status', '未连接', 'error');
                    };

                    this.websocket.onerror = (error) => {
                        this.log('❌ 音频桥接错误: ' + error, 'error');
                        this.updateStatus('bridge-status', '错误', 'error');
                    };

                } catch (error) {
                    this.log('❌ 连接失败: ' + error, 'error');
                }
            }

            handleMessage(message) {
                switch (message.type) {
                    case 'bridge_welcome':
                        this.log(`🎉 ${message.message}`, 'success');
                        this.updateStatus('zoev3-status', message.zoev3_status,
                            message.zoev3_status === 'detected' ? 'success' : 'warning');
                        break;
                    case 'recording_started':
                        this.log(`🎬 录音会话开始: ${message.session_id}`, 'success');
                        break;
                    case 'recording_stopped':
                        this.log(`⏹️ 录音会话结束`, 'success');
                        if (message.recording && message.recording.success) {
                            this.log(`📁 录音文件: ${message.recording.filename}`, 'info');
                            this.log(`⏱️ 录音时长: ${message.recording.duration.toFixed(2)}秒`, 'info');
                            this.log(`📦 音频帧数: ${message.recording.frames}`, 'info');
                        }
                        break;
                    case 'bridge_status':
                        this.opusCount = message.opus_packets || 0;
                        this.injectionCount = message.zoev3_injections || 0;
                        this.updateStats();
                        break;
                    case 'server_log':
                        this.log(message.message, 'info');
                        break;
                    default:
                        this.log(`📦 未知消息类型: ${message.type}`, 'warning');
                }
            }

            async startRecording() {
                if (this.recording) return;

                try {
                    this.log('🎤 开始录音...', 'info');

                    this.mediaStream = await navigator.mediaDevices.getUserMedia({
                        audio: {
                            sampleRate: 16000,
                            channelCount: 1,
                            echoCancellation: true,
                            noiseSuppression: true,
                            autoGainControl: true
                        }
                    });

                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
                        sampleRate: 16000
                    });

                    if (this.audioContext.state === 'suspended') {
                        await this.audioContext.resume();
                    }

                    const source = this.audioContext.createMediaStreamSource(this.mediaStream);
                    this.processor = this.audioContext.createScriptProcessor(1024, 1, 1);

                    this.processor.onaudioprocess = (event) => {
                        if (this.recording) {
                            const audioData = event.inputBuffer.getChannelData(0);
                            this.processAudioData(audioData);
                        }
                    };

                    source.connect(this.processor);
                    this.processor.connect(this.audioContext.destination);

                    this.recording = true;
                    this.recordingStartTime = Date.now();

                    // 发送开始录音消息
                    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                        this.websocket.send(JSON.stringify({
                            type: 'start_recording'
                        }));
                    }

                    // 更新UI
                    const voiceBtn = document.getElementById('voice-btn');
                    voiceBtn.textContent = '⏹️';
                    voiceBtn.classList.add('recording');
                    this.updateStatus('recording-status', '录音中', 'warning');

                    this.log('✅ 录音开始', 'success');

                } catch (error) {
                    this.log('❌ 开始录音失败: ' + error, 'error');
                    alert('无法启动录音，请检查麦克风权限');
                }
            }

            stopRecording() {
                if (!this.recording) return;

                this.log('⏹️ 停止录音...', 'info');

                this.recording = false;

                if (this.processor) {
                    this.processor.disconnect();
                    this.processor = null;
                }

                if (this.mediaStream) {
                    this.mediaStream.getTracks().forEach(track => track.stop());
                    this.mediaStream = null;
                }

                if (this.audioContext) {
                    this.audioContext.close();
                    this.audioContext = null;
                }

                // 发送停止录音消息
                if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                    this.websocket.send(JSON.stringify({
                        type: 'stop_recording'
                    }));
                }

                // 更新UI
                const voiceBtn = document.getElementById('voice-btn');
                voiceBtn.textContent = '🎤';
                voiceBtn.classList.remove('recording');
                this.updateStatus('recording-status', '待机', 'success');

                this.log('✅ 录音停止', 'success');
            }

            processAudioData(audioData) {
                // 转换为Int16Array
                const pcmData = new Int16Array(audioData.length);
                for (let i = 0; i < audioData.length; i++) {
                    pcmData[i] = Math.max(-32768, Math.min(32767, Math.floor(audioData[i] * 32768)));
                }

                // 发送音频数据
                if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                    this.websocket.send(pcmData.buffer);
                }
            }

            updateStatus(elementId, text, status) {
                const element = document.getElementById(elementId);
                if (element) {
                    element.textContent = text;
                    element.className = 'status-value status-' + status;
                }
            }

            updateStats() {
                document.getElementById('opus-count').textContent = this.opusCount;
                document.getElementById('injection-count').textContent = this.injectionCount;
                document.getElementById('audio-stats').textContent = `${this.opusCount} 包`;

                if (this.recording && this.recordingStartTime) {
                    const duration = (Date.now() - this.recordingStartTime) / 1000;
                    document.getElementById('recording-duration').textContent = duration.toFixed(1) + 's';
                }
            }

            updateConnectionTime() {
                const connectionTime = (Date.now() - this.startTime) / 1000;
                document.getElementById('connection-time').textContent = connectionTime.toFixed(0) + 's';

                // 更新录音时长
                if (this.recording && this.recordingStartTime) {
                    const duration = (Date.now() - this.recordingStartTime) / 1000;
                    document.getElementById('recording-duration').textContent = duration.toFixed(1) + 's';
                }

                setTimeout(() => this.updateConnectionTime(), 1000);
            }

            log(message, type = 'info') {
                const logArea = document.getElementById('log-area');
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = document.createElement('div');
                logEntry.className = `log-entry log-${type}`;
                logEntry.textContent = `[${timestamp}] ${message}`;
                logArea.appendChild(logEntry);
                logArea.scrollTop = logArea.scrollHeight;

                // 限制日志条数
                if (logArea.children.length > 100) {
                    logArea.removeChild(logArea.firstChild);
                }
            }
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', () => {
            new AudioBridgeTest();
        });
    </script>
</body>
</html>